import java.io.File

fun main(args: Array<String>) {

    val fileName = args.filter { it.contains('.') }.joinToString("") //название файла из командной строки
    val file = File(fileName)
    val listOfLines = file.readLines()  //сохранение в List списка строк из файла
    val invertList = convertNamesToInvertMap(listOfLines)

    while (true) {
        println("\n=== Menu ===\n1. Find a person\n2. Print all people\n0. Exit")
        when (readln().toInt()) {
            1 -> findAPerson(invertList, listOfLines)
            2 -> printAllPeople(listOfLines)
            0 -> {
                println("Bye!")
                return
            }

            else -> {
                println("Incorrect option! Try again.")
                continue
            }
        }
    }
}

//конверирует список людей в инвертированный словарь (ключ - слово, значение - № строки, где оно встречается)
fun convertNamesToInvertMap(listOfLines: List<String>): MutableMap<String, MutableList<Int>> {
    val invertList =
        mutableMapOf<String, MutableList<Int>>()  //инвертированная Map (ключ - слово, значения - № строк, в которых они есть
    for (i in listOfLines.indices) {
        val sublist = listOfLines[i].split(" ").map { it.lowercase() }
        for (j in sublist) {
            if (invertList.containsKey(j)) invertList[j]?.add(i) else invertList[j] = mutableListOf(i)
        }
    }
    return invertList
}

//сравнить содержится ли введенное слово в списке строк и напечатать строки, где содержаться
fun findAPerson(invertList: MutableMap<String, MutableList<Int>>, fileList: List<String>) {
    println("\nSelect a matching strategy: ALL, ANY, NONE")
    val strategy = readln().uppercase()
    println("\nEnter a name or email to search all matching people.")
    val searchStr = readln().split(" ").map { it.lowercase() }
    val funStrategy = when (strategy) {
        "ALL" -> ::searchAll
        "ANY" -> ::searchAny
        "NONE" -> ::searchNone
        else -> return
    }
    printLines(funStrategy(invertList, searchStr), fileList)
}

//стратегия поиска, когда имеются строки, содержащие хотя бы одно слово из поискового запроса
fun searchAny(invertList: MutableMap<String, MutableList<Int>>, searchStr: List<String>): Set<Int> {
    val numbersSet = mutableSetOf<Int>()
    for (word in searchStr) {
        if (invertList.containsKey(word)) invertList[word]?.let { numbersSet.addAll(it) }
    }
    return numbersSet.toSet() //№ строк, удовлетворяющие условию
}

//стратегия поиска, когда имеются строки, содержащие все слова из поискового запроса
fun searchAll(invertList: MutableMap<String, MutableList<Int>>, searchStr: List<String>): Set<Int> {
    val currentMap = mutableMapOf<String, MutableList<Int>>() //Map, в которой ключи соответствуют всем искомым словам
    for (word in searchStr) {
        if (!invertList.containsKey(word)) { //если хотя бы одному искомому слову не найдется
            return emptySet()                // соответствующего ключа, вернется пустой Set
        } else {
            invertList[word]?.let { currentMap.put(word, it) }
        }
    }
    return currentMap.flatMap { it.value }.groupingBy { it }.eachCount().filter { it.value == currentMap.size }
        .map { it.key }.toSet()
}

//стратегия поиска, когда имеются строки, не содержащие ни одного слова из поискового запроса
fun searchNone(invertList: MutableMap<String, MutableList<Int>>, searchStr: List<String>): Set<Int> {
    val excludeSet = mutableSetOf<Int>()
    val listOfKeys = invertList.keys
    for (word in searchStr) {
        if (listOfKeys.contains(word)) invertList[word]?.let { excludeSet.addAll(it) }
    }
    val targetSet = invertList.flatMap { it.value }.distinct().sorted().toMutableSet()
    targetSet.removeAll(excludeSet)
    return targetSet.toSet() //№ строк, удовлетворяющие условию
}

//выводит на печать строки, соответствующие стратегии поиска
fun printLines(numbersSet: Set<Int>, fileList: List<String>) {
    println()
    if (numbersSet.isEmpty()) {
        println("No matching people found.")
    } else {
        val end = if (numbersSet.size > 1) "s" else ""
        println("${numbersSet.size} person$end found:")
        numbersSet.forEach { println(fileList[it]) }
    }
}

//распечатать строки из файла
fun printAllPeople(list: List<String>) {
    println("=== List of people ===")
    list.forEach { println(it) }
}



